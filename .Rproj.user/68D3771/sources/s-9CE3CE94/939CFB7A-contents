# ====================================================================================================================
# === Spatial Social Ecological Systems   ============================================================================
# ====================================================================================================================
#
# Tom Carruthers UBC
# SSES version June 2019
#
# === Step 2. Construct LSM object ======================================================================
#
# In this script the largest B.C. Landscape is constructed from which smaller subsets can be investigated
#


# --- 2a Prerequisites  ----------------------------------------------------------------------------------

library(SSES)                                                          # Load the library
setwd("C:/Users/tcar_/Dropbox/SSES")                                   # Set working directory


# --- 2b load principal data sets ------------------------------------------------------------------------

popxclass<-read.csv("./Data/table 3 population centres and angler classes noR3W.csv") # Anglers class make up of each population centre
popxlake<-read.csv("./Data/table 4 population centres to lakes distance.csv")         # Road distance matrix population centre x lake
popxlake<-subset(popxlake,!is.na(popxlake[1]))                                        # Only lakes with names
axattr<-read.csv("./Data/axattr.csv")                                                 # The angler class specific values for lake attribute levels
lxstk<-read.csv("./Data/table 2 lake stocking information 3.csv")                     # Stocking information by lake
nolatlon<-read.csv("./Data/WBIDs wo grid 2.csv")                                      # Lake lons and lats
lakexy<-read.csv("./Data/lakes latlongs.csv")                                         # Lake lons and lats
ldets<-read.csv("./Data/table 1 lake details.csv")                                    # Lake details
angdat<-read.csv("./Data/table 3 population centres and angler classes noR3W.csv")    # Angler data
angDq<-read.csv("./Data/table 7 angler d and q.csv")                                  # Angler days fishing vs catchability
Scostdat<-read.csv("./Data/Q_Fish Costing.csv")                                       # Stocking cost data
skspecs<-read.csv("./Data/new stock specs prelim.csv")                                # Stocking parameters inc mortality rate at age
Fdat<-read.csv("./Data/table 8 fraction RB and K anglers.csv",sep=",")                        # Load the data on fraction of trout anglers
WBIDname<-read.csv("./Data/WBID_name.csv")                                            # Load the full names of the Water Body ID
obseff<-read.csv("./Data/table 2 lake stocking information 2.csv")                    # Load the observed effort

# --- 2c Format stocking data ----------------------------------------------------------------------------

lxstk<-subset(lxstk,lxstk$Release.Year%in%(2007:2010)&
                    lxstk$WBID%in%popxlake$unique_wbid)                               # Only stocking info for certain years and relevant lakes

lxstk<-aggregate(lxstk$SumOfQuantity,
                 by=list(lxstk$WBID, lxstk$Release.Year, lxstk$Area_Surface_ha,
                         lxstk$Species, lxstk$Life_stage_simplified,
                         lxstk$Average.Size..g.),FUN='mean')                          # Calculate mean stocking over the years

names(lxstk)<-c("WBID","Year","SA","Species","Life.Stage","Av.Sz","Nstocked")         # Rename stocking data
lxstk$Species[lxstk$Species%in%c("AF","AFMT")]<-"2N"                                  # Rename some entries
lxstk$Species[lxstk$Species=="AF3N"]<-"3N"                                            # More renaming

tWBID<-unique(as.character(lxstk$WBID))                                               # Store a list of unique Water Body IDs in this data set
tRY<-2007:2010                                                                        # Define the year range
tsp<-c("2N","3N")                                                                     # Define stocking types of interest
tls<-as.character(levels(lxstk$Life.Stage))                                           # Record life stages
larr<-array(0,dim=c(length(tWBID),length(tRY),length(tsp),length(tls)))               # Create a blank array [WB, YR, type, life stage]
larr[cbind(match(lxstk$WBID,tWBID),match(lxstk$Year,tRY),match(lxstk$Species,tsp),
           match(lxstk$Life.Stage,tls))]<-lxstk$Nstocked                              # Populate the array from matched vectors

larr<-apply(larr,c(1,3,4),mean)                                                       # Calculate the mean stocking by WB, type and life stage
lxstk<-as.data.frame(cbind(rep(tWBID,length(tsp)*length(tls)),
                           rep(rep(tsp,each=length(tWBID)),length(tls)),
                           rep(tls,each=length(tWBID)*length(tsp)),
                           as.vector(larr)))                                          # Create a look-up data.frame

names(lxstk)<-c("WBID","Species","Life.Stage","Nstocked")                             # Label the data.frame
lxstk$Nstocked<-fac2num(lxstk$Nstocked)                                               # Convert factors to numeric values
lxstk<-subset(lxstk,lxstk$Nstocked>0)                                                 # Remove any 'zero stocked' entries


# --- 2d Format distance data ----------------------------------------------------------------------------

popxlake<-subset(popxlake,popxlake$unique_wbid%in%lxstk$WBID)                         # Remove any lakes not in the stocking data set
popxlake<-subset(popxlake,apply(popxlake,1,nona))                                     # Remove any rows (population centres) that have any NA values
WBID<-popxlake[,1]                                                                    # Store the Water Body IDs with distances to lakes


# --- 2e Reduce the stocking data set accordingly --------------------------------------------------------

lxstk<-lxstk[lxstk$WBID%in%WBID,]                                                     # Further reduce the stocking data set to only those lakes with distances
stockingtypes<-aggregate(rep(1,nrow(lxstk)),
                         by=list(lxstk$Species,lxstk$Life.Stage),FUN='sum')[,1:2]     # Summarize all unique combinations of species and life stage

nstk<-nrow(stockingtypes)                                                             # Record the total number of stocking types


# --- 2f Characterize lake attributes and levels ---------------------------------------------------------

attributes<-aggregate(rep(1,nrow(axattr)),by=list(axattr$Name,axattr$Type),FUN='sum') # What are the attributes, are they categorical or continuous and how many levels are there for each?
attributes$x[attributes$Group.2=="cont"]<-1                                           # Continuous types have no 'levels' per se
attributes<-rbind(attributes[attributes$Group.2=="cont",],
                  attributes[attributes$Group.2=="cat",])                             # Reorganize the attributes summary

attrname<-attributes$Group.1                                                          # Record the names of the attributes


# --- 2g Reorganize the stocking data --------------------------------------------------------------------

lxstkarr<-array(0,dim=c(nrow(popxlake),nrow(stockingtypes)))                          # Create a grid of lakes x stocking types
lookup<-paste(stockingtypes$Group.1,stockingtypes$Group.2,sep="")                     # Make a unique lookup vector
ref<-paste(lxstk$Species,lxstk$Life.Stage,sep="")                                     # A comparable to the lookup vector
ind<-cbind(match(lxstk$WBID,WBID),match(ref,lookup))                                  # Create a new index for populating the stocking array
lxstkarr[ind]<-lxstk$Nstocked                                                         # Populate the new stocking array


# --- 2h Additional filtering for lakes that have more than 100 fish stocked -----------------------------

nostock<-apply(lxstkarr,1,sum)>100                                                    # Lakes with stocking of less than 100 individuals
WBID<-WBID[nostock]                                                                   # WBIDs for only those filtered lakes
WBID<-as.character(WBID)                                                              # Convert to character string
nlakes<-length(WBID)                                                                  # Record the final number of lakes
lxstk<-lxstk[lxstk$WBID%in%WBID,]                                                     # Subset stocking
lxstkarr<-lxstkarr[nostock,]                                                          # Subset stocking array
popxlake<-popxlake[nostock,]                                                          # Subset poplation x lake distance matrix


# --- 2i Lake details ------------------------------------------------------------------------------------

ldets<-ldets[match(WBID,ldets$unique_wbid),]
ldets<-ldets[,c(2,4:17)]
keep<-rep(0.1,nlakes)                                                                 # 10% post release mortality rate
keep[ldets$True.Trout.quota!=0]<-1


# --- 2j GDD calcs ---------------------------------------------------------------------------------------

GDDdat<-ldets[,1:4]                                                                   # Extract WBID, Region, Elevationi, GDD
names(GDDdat)<-c("WBID","Region","Elev","GDD")                                        # Rename the table
GDDdat$Region[GDDdat$Region==""|is.na(GDDdat$Region)|GDDdat$Region=="7A/6"]<-3        # Recode region IDs
GDDdat$Region<-as.factor(GDDdat$Region)                                               # Convert regions to factors
test<-lm(log(GDD)~Region+Elev,data=GDDdat)                                            # Model GDD as a function of Elevation and region
preddat<-GDDdat[is.na(GDDdat$GDD)&!is.na(GDDdat$Elev),]                               # Locate missing GDD
preddat$GDD<-exp(predict(test,newdat=preddat))                                        # Impute GDD using linear model

newGDD<-GDDdat[match(WBID,GDDdat$WBID),]                                              # Take all the GDD data
newGDD$GDD[match(preddat$WBID,newGDD$WBID)]<-preddat$GDD                              # Fill using imputed GDD where region and elevation are available
GDDbyregion<-aggregate(GDDdat$GDD,by=list(GDDdat$Region),FUN=mean,na.rm=T)            # Average GDD by region
newGDD$GDD[is.na(newGDD$GDD)]<-GDDbyregion$x[match(newGDD$Region[is.na(newGDD$GDD)],
                                                   GDDbyregion$Group.1)]              # Fill by average in region when elevation is not available


# --- 2k Regional Angler distribution ---------------------------------------------------------------------

pcxa<-cbind(as.numeric(as.vector(strsplit(as.character(angdat[,3]),"%"))),
            as.numeric(as.vector(strsplit(as.character(angdat[,4]),"%"))),
            as.numeric(as.vector(strsplit(as.character(angdat[,5]),"%"))),
            as.numeric(as.vector(strsplit(as.character(angdat[,6]),"%"))))            # Format the angler data
pcxa<-pcxa/apply(pcxa,1,sum)                                                          # Convert to fractions of angler classes in each population centre


# --- 2l Categorical lake attributes ----------------------------------------------------------------------

lind<-match(WBID,ldets$unique_wbid)                                                   # Lake index
Boat<-rep(1,nlakes)                                                                   # Boat level 1
Boat[ldets$Boat_Trailer_YoN[lind]%in%c("Y","Yes","YES","YES?")]<-2                    # Boat level 2
Boat[ldets$Boat_Car_Topper_YoN[lind]%in%c("Y","Yes","YES","YES?")]<-3                 # Boat level 3

Lsize<-rep(1,nlakes)                                                                  # Lake size level 1
Lsize[ldets$Area_Surface_ha[lind]>50]<-2                                              # Lake size level 2

Motor<-rep(1,nlakes)                                                                  # Motor restriction level 1
Motor[ldets$Boat_Restriction[lind]=="Engine power restriction 10 hp"]<-2              # Motor restriction level 2
Motor[ldets$Boat_Restriction[lind]%in%c("Electric motors only","no powered boats",
                                        "No powered boats")]<-3                       # Motor restriction level 3

Restrictions<-rep(1,nlakes)                                                           # Gear restriction level 1
Restrictions[ldets$Bait_Ban[lind]=="Y"]<-2                                            # Gear restriction level 2
Restrictions[ldets$Single_Barbless_Hook[lind]=="Y"]<-3                                # Gear restriction level 3
Restrictions[ldets$Fly[lind]=="Y"]<-4                                                 # Gear restriction level 4

#!!! species ignored for now
Species<-1 #(lxstkarr[,4]>0)+1                                                        # class 4 is the Kokanee stocked lakes these are level 2 in this analysis

Take2<-ldets$True.Trout.quota[lind]                                                   # Take limit
Take<-rep(4,length(Take2))                                                            # Take limit level 4
Take[Take2==0]<-1                                                                     # Take limit level 1
Take[Take2==1|Take2==2]<-2                                                            # Take limit level 2
Take[Take2==4]<-3                                                                     # Take limit level 3

BagLim<-ldets$True.Trout.quota[lind]                                                  # Record the bag limit

lxattr<-cbind(Boat,Lsize,Motor,Restrictions,Species,Take)                             # Store all categorical lake attributes
ncatvar<-length(unique(axattr$Category[axattr$Type=="cat"]))                          # Vector of max levels per attribute
ncat<-max(attributes$x)                                                               # Maximum number of levels
axattr2<-array(NA,dim=c(1,4,ncatvar,ncat))                                            # Array for angler parameters WRT each attribute level
catnams<-attributes[attributes$Group.2=="cat",]                                       # Store the names of categorical variables

for(i in 1:nrow(catnams)){                                                            # Loop over categorical attributes and assign angler parameters
  sub<-as.matrix(subset(axattr,axattr$Name==catnams$Group.1[i])[,5:8])
  axattr2[1,,i,1:nrow(sub)]<-t(sub)
}

axattr2[1,1:4,5,1:2]<-0                                                               # !!! set the fifth criterion species to zeros

# --- 2m Stocking cost formatting ----------------------------------------------------------------------

stemp<-rep("2N",length(Scostdat$Stock))                                               # Do some formatting of stocking costs for ploidy
stemp[grep("3N",Scostdat$Stock)]<-"3N"                                                # Triploid format
Scostdat$Species<-stemp                                                               # Rename the species in the stocking cost table

Scostdat$Lifestage<-as.character(Scostdat$Lifestage)                                  # Reformatting
Scostdat$Lifestage[Scostdat$Lifestage=="AD"]<-"CA"                                    # Reformatting
Scostdat$Lifestage[Scostdat$Lifestage=="SCA"]<-"CA"                                   # Reformatting
Scostdat$Lifestage[Scostdat$Lifestage=="JUV"]<-"FR"                                   # Reformatting
Scostdat$Lifestage[Scostdat$Lifestage=="Ye"]<-"YE"                                    # Reformatting
costy<-fac2num(Scostdat$Stock.Farmgate.Cost.per.Fish)                                 # Reformatting
costy[is.na(costy)]<-0                                                                # Reformatting
Sagg<-aggregate(costy,by=list(Scostdat$Waterbody.ID,
                              Scostdat$Species,Scostdat$Lifestage),FUN=mean)          # Stocking costs by species and lifestage
SaggR<-aggregate(costy,by=list(Scostdat$Region,Scostdat$Species,Scostdat$Lifestage),
                                                                           FUN=mean)  # Stocking costs by region, species and lifestage
SaggS<-aggregate(costy,by=list(Scostdat$Species,Scostdat$Lifestage),FUN=mean)         # Stocking cpsts by species and lifestage
SaggL<-aggregate(costy,by=list(Scostdat$Lifestage),FUN=mean)                          # Stocking costs by life stage

Scosts<-array(NA,dim=c(1,nlakes,nstk))                                                # Make a blank arra

Region<-as.character(ldets$Region[match(WBID,ldets$unique_wbid)])                     # Get region
stk<-paste("t",stockingtypes$Group.1,stockingtypes$Group.2,sep="")                    # Stocking codes
LS<-as.character(stockingtypes$Group.2)                                               # Life stage vector

# stocking costs imputed by (lake / species / lifestage) then (region / species / lifestage) then (species/lifestage) then (lifestage)

for(st in 1:nstk){                                                                    # Lake species life stage
  cond<-LS[st]==as.character(SaggL$Group.1)
  if(sum(cond)>0)Scosts[1,,st]<-SaggL$x[cond]
}

for(st in 1:nstk){
  cond<-stk[st]==paste("t",SaggS$Group.1,SaggS$Group.2,sep="")                        # Region species lifestage
  if(sum(cond)>0)Scosts[1,,st]<-SaggS$x[cond]
}

for(ll in 1:nlakes){
  for(st in 1:nstk){
    cond<-Region[ll]==SaggR$Group.1&stk[st]==paste("t",SaggR$Group.2,SaggR$Group.3,sep="") # Species lifestate
    if(sum(cond)>0)Scosts[1,ll,st]<-SaggR$x[cond]
  }
}

for(ll in 1:nlakes){
  for(st in 1:nstk){
    cond<-as.character(WBID[ll])==as.character(Sagg$Group.1)&stk[st]==paste("t",Sagg$Group.2,Sagg$Group.3,sep="") # Lifestage
    if(sum(cond)>0)Scosts[1,ll,st]<-Sagg$x[cond]
  }
}

print(paste("Cost data for all fish? =", sum(lxstkarr>0&is.na(Scosts[1,,]))==0))       # do all stocked fish have costs?
sind<-match(stk,names(skspecs))


# --- 2n Continuous lake attributes -------------------------------------------------------------------------------------------

#jpeg(paste(Drive,":/Trout lakes/Images/HD models.jpg",sep=""),width=7,height=6,units="in",res=300)
par(mfrow=c(2,2),mai=c(0.6,0.35,0.2,0.01),omi=c(0.05,0.3,0.01,0.01))

lmt<-new('list')
cols<-c("black","grey","black","grey")
ltys<-c(1,1,2,2)
pchy<-c(19,19,1,1)
liney<-2.2
cexy<-0.85
asub<-attributes[attributes$Group.2=="cont",]

wdat<-subset(axattr,axattr$Name==asub$Group.1[1])
dat<-as.data.frame(cbind(unlist(wdat[,5:8]),rep(fac2num(wdat$Levels),4),rep(1:4,each=nrow(wdat))))
names(dat)<-c("y","x","a")
dat$a<-as.factor(dat$a)
test<-lm(y~x*a,dat=dat)
pred<-predict(test,newdat=dat)
plot(NA,xlim=range(dat$x),ylim=range(pred,dat$y),ylab="",xlab="")
for(a in 1:4){
  points(dat$x[dat$a==a],dat$y[dat$a==a],col=cols[a],pch=pchy[a])
  x<-seq(min(dat$x),max(dat$x),length.out=100)
  nudat<-as.data.frame(cbind(x,rep(a,100)))
  names(nudat)<-c("x","a")
  nudat$a<-as.factor(nudat$a)
  pred<-predict(test,newdat=nudat)
  lines(x,pred,col=cols[a],lty=ltys[a])
}
mtext("Angler crowding, X (anglers per hectare)",1,line=liney,cex=cexy)

mtext("(a)",3,line=0.2,adj=0.025,cex=0.9)

lmt[[1]]<-test

wdat<-subset(axattr,axattr$Name==asub$Group.1[2])
wdat<-wdat[c(1,3:7),]
wdat[1,5:8]<--10
#plot(dat$x,dat$y,xlim=range(dat$x),ylim=range(pred,dat$y),ylab="",xlab="")
#lines(newdata$x,pred)
#plot(NA,xlim=range(as.numeric(as.character(wdat$Levels))),ylim=range(wdat[,5:8]),ylab="",xlab="")
plot(NA,xlim=c(0,10),ylim=c(-2,0.25),ylab="",xlab="")

subL<-new('list')
for(a in 1:4){
  dat<-as.data.frame(cbind(wdat[,4+a],fac2num(wdat$Levels),fac2num(wdat$Levels)^2))
  names(dat)<-c("y","x","x2")
  dat$x[dat$x==0]<-0.05
  #test<-nls(y~a*x^b+d*x2+c,start=list(a=-0.5,b=-0.5,c=0,d=1),data=dat)
  #newdata=data.frame(x=seq(min(dat$x),max(dat$x),length.out=100),x2=seq(min(dat$x),max(dat$x),length.out=100)^2)
  test<-nls(y~a*x^b+c,start=list(a=-0.5,b=-0.5,c=0),data=dat)
  newdata=data.frame(x=seq(min(dat$x),max(dat$x),length.out=100))
  pred<-predict(test,newdata=newdata)
  points(dat$x,dat$y,col=cols[a],pch=pchy[a])
  lines(newdata$x,pred,col=cols[a],lty=ltys[a])
  subL[[a]]<-test
}
mtext("Expected catch rate, C (fish/day)",1,line=liney,cex=cexy)
mtext("(b)",3,line=0.2,adj=0.025,cex=0.9)
lmt[[2]]<-subL


legend('right',legend=c("Class 1","Class 2","Class 3","Class 4"),text.col=cols,bty='n',col=cols,lty=ltys)

wdat<-subset(axattr,axattr$Name==asub$Group.1[3])
dat<-as.data.frame(cbind(unlist(wdat[,5:8]),rep(fac2num(wdat$Levels),4),rep(1:4,each=nrow(wdat))))
names(dat)<-c("y","x","a")
dat$a<-as.factor(dat$a)
test<-lm(y~x*a,dat=dat)
pred<-predict(test,newdat=dat)
plot(NA,xlim=range(dat$x),ylim=range(pred,dat$y),ylab="",xlab="")
for(a in 1:4){
  points(dat$x[dat$a==a],dat$y[dat$a==a],col=cols[a],pch=pchy[a])
  x<-seq(min(dat$x),max(dat$x),length.out=100)
  nudat<-as.data.frame(cbind(x,rep(a,100)))
  names(nudat)<-c("x","a")
  nudat$a<-as.factor(nudat$a)
  pred<-predict(test,newdat=nudat)
  lines(x,pred,col=cols[a],lty=ltys[a])
}
mtext("Travel distance,d (km)",1,line=liney,cex=cexy)
mtext("(c)",3,line=0.2,adj=0.025,cex=0.9)
lmt[[3]]<-test


wdat<-subset(axattr,axattr$Name==asub$Group.1[4])
dat<-as.data.frame(cbind(unlist(wdat[,5:8]),rep(fac2num(wdat$Levels),4),rep(1:4,each=nrow(wdat))))
names(dat)<-c("y","x","a")
dat$a<-as.factor(dat$a)
test<-lm(y~x*a,dat=dat)
pred<-predict(test,newdat=dat)
plot(NA,xlim=range(dat$x),ylim=range(pred,dat$y),ylab="",xlab="")
for(a in 1:4){
  points(dat$x[dat$a==a],dat$y[dat$a==a],col=cols[a],pch=pchy[a])
  x<-seq(min(dat$x),max(dat$x),length.out=100)
  nudat<-as.data.frame(cbind(x,rep(a,100)))
  names(nudat)<-c("x","a")
  nudat$a<-as.factor(nudat$a)
  pred<-predict(test,newdat=nudat)
  lines(x,pred,col=cols[a],lty=ltys[a])
}
mtext("(d)",3,line=0.2,adj=0.025,cex=0.9)
lmt[[4]]<-test
mtext("Expected size of fish caught,S (cm)",1,line=liney,cex=cexy)
mtext("Utility",2,line=0.6,outer=T,cex=cexy)

#dev.off()

# --- 2o Determine uncertainties in attribute parameters for lakes -----------------------------------------------------------------

attr<-as.data.frame(rbind(attributes$x,c(rep("lognormal",4),rep("mvlogistic",6)),rep(0.1,10)))   # number of categories, error type, CV
row.names(attr)<-c("attr","attrerrtype","attrCV")
names(attr)<-attributes$Group.1

# --- 2p Get lake long names -------------------------------------------------------------------------------------------------------

pcnam<-as.character(popxclass$Population.centre)
FTroutAng<-Fdat$FTroutAng[match(pcnam,Fdat$Centre)]

# --- 2q Process observed effort data ----------------------------------------------------------------------------------------------

obseff$AvgOfTotal.Anger.Count<-fac2num(obseff$AvgOfTotal.Angler.Count)
obseff$WBID<-as.character(obseff$WBID)
obseff<-obseff[obseff$Release.Year%in%(2009:2012) & obseff$WBID%in%WBID & !is.na(obseff$AvgOfTotal.Angler.Count),]
obseff<-aggregate(obseff$AvgOfTotal.Angler.Count,by=list(obseff$WBID),FUN='mean')
obseff2<-rep(NA,length(WBID))
obseff2[match(obseff[,1],WBID)]<-obseff[,2]*250


# --- 2r Create a landscape object and estimate effort  ----------------------------------------------------------------------------

# use class?Landscape to see help documentation for the various slots of the Landscape class object

obj<-new("Landscape",templatefile="./Data/Setup.csv")                  # Create a template landscape object from the setup.csv file in the working directory
obj@Name<-"Preliminary v7"
obj@Note<-"Example model for distribution and update by UC 2019"
obj@npc<-nrow(popxclass)
obj@nl<-nrow(popxlake)
obj@na<-4
obj@nattr<-max(axattr$Category)
obj@ncat<-ncat
obj@nsim<-1
obj@nmanage<-1
obj@nage<-6
obj@nst<-nrow(stockingtypes)

obj@nattrvals<-sum(attributes$x)
obj@pcnam<-pcnam
obj@pcsize<-matrix(angdat$licenses.sold,nrow=1)
obj@pcx<-popxclass$lon
obj@pcy<-popxclass$lat
obj@lakenam<-as.character(popxlake[,1])
obj@longnam<-as.character(WBIDname[match(obj@lakenam,WBIDname[,1]),2])
obj@lakex<-fac2num(lakexy$dbfLONGITUDE[match(WBID,lakexy$unique_wbid)])
obj@lakey<-fac2num(lakexy$dbfLATITUDE[match(WBID,lakexy$unique_wbid)])
cond<-match(nolatlon$WBID,obj@lakenam)                                      # filter for missing data
nolatlon<-subset(nolatlon,!is.na(cond))
cond<-cond[!is.na(cond)]
obj@lakex[cond]<-nolatlon$LONG
obj@lakey[cond]<-nolatlon$LAT
obj@lakex[is.na(obj@lakex)]<--129
obj@lakey[is.na(obj@lakey)]<-49
obj@lakearea<-ldets$Area_Surface_ha[lind]
obj@lxslev<-array(lxstkarr,c(1,dim(lxstkarr)))
obj@GDD<-matrix(newGDD$GDD,nrow=1)
obj@TDS<-matrix(NA,ncol=obj@nl,nrow=1)
obj@stockable<-rep(1,obj@nl)
obj@anam<-c("Class 1","Class 2","Class 3","Class 4")
obj@apr<-matrix(as.numeric(angDq[1,2:5]),nrow=1)*matrix(c(0.5,0.5,1,1),nrow=1) # multiplied by adjustment for participation rate
obj@apr<-array(rep(as.numeric(obj@apr)/5,each=obj@npc),c(1,obj@npc,obj@na))
obj@aq<-matrix(as.numeric(angDq[2,2:5]*4),nrow=1)#*matrix(c(0.5,0.5,0.1,0.5),nrow=1) # Multiplied by probability of keeping fish if a keep lake
obj@attr<-attr
test<-popxlake[,2:ncol(popxlake)]
pcxl<-array(as.numeric(unlist(test)),dim=c(nlakes,nrow(popxclass)))
obj@pcxl<-array(t(pcxl),c(1,dim(pcxl)[2:1]))
obj@pcxa<-array(pcxa,c(1,dim(pcxa)))
obj@lxattr<-array(lxattr,c(1,dim(lxattr)))
obj@axattr<-axattr2
obj@exeff<-matrix(obseff2,nrow=1)
obj@excr<-matrix(rep(NA,obj@nl),nrow=1)
obj@exavs<-matrix(rep(NA,obj@nl),nrow=1)
obj@costs<-array(0,dim=c(1,nlakes,ncat,ncatvar))
obj@Scosts<-Scosts
obj@totcost<-array(NA,c(1,1))
obj@effval<-matrix(rep((957-13.9)/(286167*13),4)*1000000,nrow=1)
obj@licval<-matrix((13.9/286167)*1000000,nrow=1)
obj@stnam<-names(skspecs)[sind]
obj@aclass<-as.numeric(skspecs[1,sind])
obj@stwt<-as.numeric(skspecs[2,sind])
obj@stlen<-as.numeric(skspecs[3,sind])
obj@popval<-array(c(207.7,       0.009943, -0.1457, 0.5698, 30.40,          NA,   NA,   0.025),dim=c(1,8,nstk)) # New Lester
obj@GModel<-"New Lester"
obj@Mage<-array(fac2num(skspecs[4:9,sind]),dim=c(1,6,nstk))
obj@lm<-lmt
obj@FTroutAng<-FTroutAng
obj@acc<-array(rep(1,obj@nl),dim=c(1,obj@nl))
obj@acc_a<-0
obj@fac<-array(rep(1,obj@nl),dim=c(1,obj@nl))
obj@fac_a<-0
obj@DR<-matrix(rep(0.5,obj@na),nrow=1)
obj@BagLim<-matrix(BagLim,nrow=1)
obj@DD<-0.05
obj@maxdays<-matrix(angDq[1,2:5]*100/max(angDq[1,2:5]),nrow=1)
obj@sel<-array(c(0,0.5,rep(1,obj@nage-2)),dim=c(1,obj@nage))

# --- 2s Subset and save the landscape object ---------------------------------------------------------------------------------------

obj<-Lsub(obj,ind=(1:obj@nl)[obj@lakearea>5])                                                            # greater than 5 hectares
cond<-(obj@exeff[1,]>25)|is.na(obj@exeff)
obj<-Lsub(obj,ind=(1:obj@nl)[cond])                                                                      # effort of more than 25 angler days per year
obj<-Lsub(obj,ind=(1:obj@nl)[obj@longnam!=""&!is.na(obj@longnam)])                                       # get rid of lakes without long names (for plotting)
obj<-Lsub(obj,ind=(1:obj@nl)[apply(obj@lxslev[1,,],1,sum)>200])                                          # annual stocking of over 200 fish
obj<-Lsub(obj,ind=(1:obj@nl)[obj@longnam!='STUMP LAKE'&obj@longnam!='WHALE1'&obj@longnam!='LEIGHTON'])
obj@pcnam[pcnam=="Kamploops"]<-"Kamloops"                                                                # Do a quick rename
save(obj,file='./Out/Landscape/Prelim_7')

# --- 2t Store some summary data ----------------------------------------------------------------------------------------------------

dat4john<-as.data.frame(cbind(obj@lakenam,obj@longnam,obj@lakex,obj@lakey,obj@GDD[1,],obj@lakearea,obj@exeff[1,]))
names(dat4john)<-c("LakeID","Name","Lon","Lat","GDD","Area","Effort")
write.csv(dat4john,file="./Out/Landscape/dat4john.csv")


# ==================================================================================================================================
# End of script ====================================================================================================================
# ==================================================================================================================================
