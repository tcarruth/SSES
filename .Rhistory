Scostdat$Lifestage[Scostdat$Lifestage=="Ye"]<-"YE"                                    # Reformatting
costy<-fac2num(Scostdat$Stock.Farmgate.Cost.per.Fish)                                 # Reformatting
costy[is.na(costy)]<-0                                                                # Reformatting
Sagg<-aggregate(costy,by=list(Scostdat$Waterbody.ID,
Scostdat$Species,Scostdat$Lifestage),FUN=mean)          # Stocking costs by species and lifestage
SaggR<-aggregate(costy,by=list(Scostdat$Region,Scostdat$Species,Scostdat$Lifestage),
FUN=mean)  # Stocking costs by region, species and lifestage
SaggS<-aggregate(costy,by=list(Scostdat$Species,Scostdat$Lifestage),FUN=mean)         # Stocking cpsts by species and lifestage
SaggL<-aggregate(costy,by=list(Scostdat$Lifestage),FUN=mean)                          # Stocking costs by life stage
Scosts<-array(NA,dim=c(1,nlakes,nstk))                                                # Make a blank arra
Region<-as.character(ldets$Region[match(WBID,ldets$unique_wbid)])                     # Get region
stk<-paste("t",stockingtypes$Group.1,stockingtypes$Group.2,sep="")                    # Stocking codes
LS<-as.character(stockingtypes$Group.2)                                               # Life stage vector
# stocking costs imputed by (lake / species / lifestage) then (region / species / lifestage) then (species/lifestage) then (lifestage)
for(st in 1:nstk){                                                                    # Lake species life stage
cond<-LS[st]==as.character(SaggL$Group.1)
if(sum(cond)>0)Scosts[1,,st]<-SaggL$x[cond]
}
for(st in 1:nstk){
cond<-stk[st]==paste("t",SaggS$Group.1,SaggS$Group.2,sep="")                        # Region species lifestage
if(sum(cond)>0)Scosts[1,,st]<-SaggS$x[cond]
}
for(ll in 1:nlakes){
for(st in 1:nstk){
cond<-Region[ll]==SaggR$Group.1&stk[st]==paste("t",SaggR$Group.2,SaggR$Group.3,sep="") # Species lifestate
if(sum(cond)>0)Scosts[1,ll,st]<-SaggR$x[cond]
}
}
for(ll in 1:nlakes){
for(st in 1:nstk){
cond<-as.character(WBID[ll])==as.character(Sagg$Group.1)&stk[st]==paste("t",Sagg$Group.2,Sagg$Group.3,sep="") # Lifestage
if(sum(cond)>0)Scosts[1,ll,st]<-Sagg$x[cond]
}
}
print(paste("Cost data for all fish? =", sum(lxstkarr>0&is.na(Scosts[1,,]))==0))       # do all stocked fish have costs?
sind<-match(stk,names(skspecs))
# --- 2n Continuous lake attributes -------------------------------------------------------------------------------------------
#jpeg(paste(Drive,":/Trout lakes/Images/HD models.jpg",sep=""),width=7,height=6,units="in",res=300)
par(mfrow=c(2,2),mai=c(0.6,0.35,0.2,0.01),omi=c(0.05,0.3,0.01,0.01))
lmt<-new('list')
cols<-c("black","grey","black","grey")
ltys<-c(1,1,2,2)
pchy<-c(19,19,1,1)
liney<-2.2
cexy<-0.85
asub<-attributes[attributes$Group.2=="cont",]
wdat<-subset(axattr,axattr$Name==asub$Group.1[1])
dat<-as.data.frame(cbind(unlist(wdat[,5:8]),rep(fac2num(wdat$Levels),4),rep(1:4,each=nrow(wdat))))
names(dat)<-c("y","x","a")
dat$a<-as.factor(dat$a)
test<-lm(y~x*a,dat=dat)
pred<-predict(test,newdat=dat)
plot(NA,xlim=range(dat$x),ylim=range(pred,dat$y),ylab="",xlab="")
for(a in 1:4){
points(dat$x[dat$a==a],dat$y[dat$a==a],col=cols[a],pch=pchy[a])
x<-seq(min(dat$x),max(dat$x),length.out=100)
nudat<-as.data.frame(cbind(x,rep(a,100)))
names(nudat)<-c("x","a")
nudat$a<-as.factor(nudat$a)
pred<-predict(test,newdat=nudat)
lines(x,pred,col=cols[a],lty=ltys[a])
}
mtext("Angler crowding, X (anglers per hectare)",1,line=liney,cex=cexy)
mtext("(a)",3,line=0.2,adj=0.025,cex=0.9)
lmt[[1]]<-test
wdat<-subset(axattr,axattr$Name==asub$Group.1[2])
wdat<-wdat[c(1,3:7),]
wdat[1,5:8]<--10
#plot(dat$x,dat$y,xlim=range(dat$x),ylim=range(pred,dat$y),ylab="",xlab="")
#lines(newdata$x,pred)
#plot(NA,xlim=range(as.numeric(as.character(wdat$Levels))),ylim=range(wdat[,5:8]),ylab="",xlab="")
plot(NA,xlim=c(0,10),ylim=c(-2,0.25),ylab="",xlab="")
subL<-new('list')
for(a in 1:4){
dat<-as.data.frame(cbind(wdat[,4+a],fac2num(wdat$Levels),fac2num(wdat$Levels)^2))
names(dat)<-c("y","x","x2")
dat$x[dat$x==0]<-0.05
#test<-nls(y~a*x^b+d*x2+c,start=list(a=-0.5,b=-0.5,c=0,d=1),data=dat)
#newdata=data.frame(x=seq(min(dat$x),max(dat$x),length.out=100),x2=seq(min(dat$x),max(dat$x),length.out=100)^2)
test<-nls(y~a*x^b+c,start=list(a=-0.5,b=-0.5,c=0),data=dat)
newdata=data.frame(x=seq(min(dat$x),max(dat$x),length.out=100))
pred<-predict(test,newdata=newdata)
points(dat$x,dat$y,col=cols[a],pch=pchy[a])
lines(newdata$x,pred,col=cols[a],lty=ltys[a])
subL[[a]]<-test
}
mtext("Expected catch rate, C (fish/day)",1,line=liney,cex=cexy)
mtext("(b)",3,line=0.2,adj=0.025,cex=0.9)
lmt[[2]]<-subL
legend('right',legend=c("Class 1","Class 2","Class 3","Class 4"),text.col=cols,bty='n',col=cols,lty=ltys)
wdat<-subset(axattr,axattr$Name==asub$Group.1[3])
dat<-as.data.frame(cbind(unlist(wdat[,5:8]),rep(fac2num(wdat$Levels),4),rep(1:4,each=nrow(wdat))))
names(dat)<-c("y","x","a")
dat$a<-as.factor(dat$a)
test<-lm(y~x*a,dat=dat)
pred<-predict(test,newdat=dat)
plot(NA,xlim=range(dat$x),ylim=range(pred,dat$y),ylab="",xlab="")
for(a in 1:4){
points(dat$x[dat$a==a],dat$y[dat$a==a],col=cols[a],pch=pchy[a])
x<-seq(min(dat$x),max(dat$x),length.out=100)
nudat<-as.data.frame(cbind(x,rep(a,100)))
names(nudat)<-c("x","a")
nudat$a<-as.factor(nudat$a)
pred<-predict(test,newdat=nudat)
lines(x,pred,col=cols[a],lty=ltys[a])
}
mtext("Travel distance,d (km)",1,line=liney,cex=cexy)
mtext("(c)",3,line=0.2,adj=0.025,cex=0.9)
lmt[[3]]<-test
wdat<-subset(axattr,axattr$Name==asub$Group.1[4])
dat<-as.data.frame(cbind(unlist(wdat[,5:8]),rep(fac2num(wdat$Levels),4),rep(1:4,each=nrow(wdat))))
names(dat)<-c("y","x","a")
dat$a<-as.factor(dat$a)
test<-lm(y~x*a,dat=dat)
pred<-predict(test,newdat=dat)
plot(NA,xlim=range(dat$x),ylim=range(pred,dat$y),ylab="",xlab="")
for(a in 1:4){
points(dat$x[dat$a==a],dat$y[dat$a==a],col=cols[a],pch=pchy[a])
x<-seq(min(dat$x),max(dat$x),length.out=100)
nudat<-as.data.frame(cbind(x,rep(a,100)))
names(nudat)<-c("x","a")
nudat$a<-as.factor(nudat$a)
pred<-predict(test,newdat=nudat)
lines(x,pred,col=cols[a],lty=ltys[a])
}
mtext("(d)",3,line=0.2,adj=0.025,cex=0.9)
lmt[[4]]<-test
mtext("Expected size of fish caught,S (cm)",1,line=liney,cex=cexy)
mtext("Utility",2,line=0.6,outer=T,cex=cexy)
#dev.off()
# --- 2o Determine uncertainties in attribute parameters for lakes -----------------------------------------------------------------
attr<-as.data.frame(rbind(attributes$x,c(rep("lognormal",4),rep("mvlogistic",6)),rep(0.1,10)))   # number of categories, error type, CV
row.names(attr)<-c("attr","attrerrtype","attrCV")
names(attr)<-attributes$Group.1
# --- 2p Get lake long names -------------------------------------------------------------------------------------------------------
pcnam<-as.character(popxclass$Population.centre)
FTroutAng<-Fdat$FTroutAng[match(pcnam,Fdat$Centre)]
# --- 2q Process observed effort data ----------------------------------------------------------------------------------------------
obseff$AvgOfTotal.Anger.Count<-fac2num(obseff$AvgOfTotal.Angler.Count)
obseff$WBID<-as.character(obseff$WBID)
obseff<-obseff[obseff$Release.Year%in%(2009:2012) & obseff$WBID%in%WBID & !is.na(obseff$AvgOfTotal.Angler.Count),]
obseff<-aggregate(obseff$AvgOfTotal.Angler.Count,by=list(obseff$WBID),FUN='mean')
obseff2<-rep(NA,length(WBID))
obseff2[match(obseff[,1],WBID)]<-obseff[,2]*250
# --- 2r Create a landscape object and estimate effort  ----------------------------------------------------------------------------
# use class?Landscape to see help documentation for the various slots of the Landscape class object
obj<-new("Landscape",templatefile="./Data/Setup.csv")                  # Create a template landscape object from the setup.csv file in the working directory
obj@Name<-"Preliminary v7"
obj@Note<-"Example model for distribution and update by UC 2019"
obj@npc<-nrow(popxclass)
obj@nl<-nrow(popxlake)
obj@na<-4
obj@nattr<-max(axattr$Category)
obj@ncat<-ncat
obj@nsim<-1
obj@nmanage<-1
obj@nage<-6
obj@nst<-nrow(stockingtypes)
obj@nattrvals<-sum(attributes$x)
obj@pcnam<-pcnam
obj@pcsize<-matrix(angdat$licenses.sold,nrow=1)
obj@pcx<-popxclass$lon
obj@pcy<-popxclass$lat
obj@lakenam<-as.character(popxlake[,1])
obj@longnam<-as.character(WBIDname[match(obj@lakenam,WBIDname[,1]),2])
obj@lakex<-fac2num(lakexy$dbfLONGITUDE[match(WBID,lakexy$unique_wbid)])
obj@lakey<-fac2num(lakexy$dbfLATITUDE[match(WBID,lakexy$unique_wbid)])
cond<-match(nolatlon$WBID,obj@lakenam)                                      # filter for missing data
nolatlon<-subset(nolatlon,!is.na(cond))
obj@topcols<-rep('black',100)  # if you want control of topgraphical map coloring
cond<-cond[!is.na(cond)]
obj@lakex[cond]<-nolatlon$LONG
obj@lakey[cond]<-nolatlon$LAT
obj@lakex[is.na(obj@lakex)]<--129
obj@lakey[is.na(obj@lakey)]<-49
obj@lakearea<-ldets$Area_Surface_ha[lind]
obj@lxslev<-array(lxstkarr,c(1,dim(lxstkarr)))
obj@GDD<-matrix(newGDD$GDD,nrow=1)
obj@TDS<-matrix(NA,ncol=obj@nl,nrow=1)
obj@stockable<-rep(1,obj@nl)
obj@anam<-c("Class 1","Class 2","Class 3","Class 4")
obj@apr<-matrix(as.numeric(angDq[1,2:5]),nrow=1)*matrix(c(0.5,0.5,1,1),nrow=1) # multiplied by adjustment for participation rate
obj@apr<-array(rep(as.numeric(obj@apr)/5,each=obj@npc),c(1,obj@npc,obj@na))
obj@aq<-matrix(as.numeric(angDq[2,2:5]*4),nrow=1)#*matrix(c(0.5,0.5,0.1,0.5),nrow=1) # Multiplied by probability of keeping fish if a keep lake
obj@attr<-attr
test<-popxlake[,2:ncol(popxlake)]
pcxl<-array(as.numeric(unlist(test)),dim=c(nlakes,nrow(popxclass)))
obj@pcxl<-array(t(pcxl),c(1,dim(pcxl)[2:1]))
obj@pcxa<-array(pcxa,c(1,dim(pcxa)))
obj@lxattr<-array(lxattr,c(1,dim(lxattr)))
obj@axattr<-axattr2
obj@exeff<-matrix(obseff2,nrow=1)
obj@excr<-matrix(rep(NA,obj@nl),nrow=1)
obj@exavs<-matrix(rep(NA,obj@nl),nrow=1)
obj@costs<-array(0,dim=c(1,nlakes,ncat,ncatvar))
obj@Scosts<-Scosts
obj@totcost<-array(NA,c(1,1))
obj@effval<-matrix(rep((957-13.9)/(286167*13),4)*1000000,nrow=1)
obj@licval<-matrix((13.9/286167)*1000000,nrow=1)
obj@stnam<-names(skspecs)[sind]
obj@aclass<-as.numeric(skspecs[1,sind])
obj@stwt<-as.numeric(skspecs[2,sind])
obj@stlen<-as.numeric(skspecs[3,sind])
obj@popval<-array(c(207.7,       0.009943, -0.1457, 0.5698, 30.40,          NA,   NA,   0.025),dim=c(1,8,nstk)) # New Lester
obj@GModel<-"New Lester"
obj@Mage<-array(fac2num(skspecs[4:9,sind]),dim=c(1,6,nstk))
obj@lm<-lmt
obj@FTroutAng<-FTroutAng
obj@acc<-array(rep(1,obj@nl),dim=c(1,obj@nl))
obj@acc_a<-0
obj@fac<-array(rep(1,obj@nl),dim=c(1,obj@nl))
obj@fac_a<-0
obj@DR<-matrix(rep(0.5,obj@na),nrow=1)
obj@BagLim<-matrix(BagLim,nrow=1)
obj@DD<-0.05
obj@maxdays<-matrix(angDq[1,2:5]*100/max(angDq[1,2:5]),nrow=1)
obj@sel<-array(c(0,0.5,rep(1,obj@nage-2)),dim=c(1,obj@nage))
# --- 2s Subset and save the landscape object ---------------------------------------------------------------------------------------
obj<-Lsub(obj,ind=(1:obj@nl)[obj@lakearea>5])                                                            # greater than 5 hectares
cond<-(obj@exeff[1,]>25)|is.na(obj@exeff)
obj<-Lsub(obj,ind=(1:obj@nl)[cond])                                                                      # effort of more than 25 angler days per year
obj<-Lsub(obj,ind=(1:obj@nl)[obj@longnam!=""&!is.na(obj@longnam)])                                       # get rid of lakes without long names (for plotting)
obj<-Lsub(obj,ind=(1:obj@nl)[apply(obj@lxslev[1,,],1,sum)>200])                                          # annual stocking of over 200 fish
obj<-Lsub(obj,ind=(1:obj@nl)[obj@longnam!='STUMP LAKE'&obj@longnam!='WHALE1'&obj@longnam!='LEIGHTON'])
obj@pcnam[pcnam=="Kamploops"]<-"Kamloops"                                                                # Do a quick rename
save(obj,file='./Out/Landscape/Landscape_Step2')
obj@misc
set.seed(1)                                                            # Set a random seed (to ensure reproducibility)
i_have_2_mins=T                                                        # How much computation do you want to do?
# --- Load latest complete landscape object (584 lakes, 24 population centres) ------------------------------------
load(file='./Out/Landscape/Lanscape_Step2')                                  # Load a recent full landscape model
summary(obj,lcex=0.25)                                                 # What does it look like
# --- How well are we predicting landscape effort? ----------------------------------------------------------------
if(i_have_2_mins){
uprat<-0.015   # When converging on a stable effort distribution is the contributing fraction of new effort
varind<-0.2    # The slope of the logit choice (low values are 'choosey' a value of 1 is proportional to utility)
nits<-500      # The number of iterations for the numerical convergence to the approximate IFD
# --- Basic effort calculation (assuming effort is determined by obj@pcsize angler licences) --------------------
obj@sel<-array(c(0,0.2,rep(1,obj@nage-2)),dim=c(1,obj@nage))
obj<-calceff(obj,nits=nits,varind=varind,uprat=uprat)   # Run the LSM to convergence on the IFD
cond<-!is.na(obj@exeff[1,])&(obj@exeff[1,]<3|obj@sigeff[1,1,]<3) # Lakes to ignore
obj@exeff[1,cond]<-NA
#obj2<-Lsub(obj,!obj@longnam=="BEAVER4")
graphics.off()
par(mfrow=c(2,2),mai=c(0.8,0.8,0.1,0.1))                # Set up a plot
plotconv(obj,tol=1,totE=T)                              # Did it converge (total effort on a lake)?
Ecomp(obj,lims=c(2,11),nice=T,log=T,funcy=NA)                      # How does the effort match up (log-log plot)?
Ecomp(obj,lims=c(0,5000),nice=T,log=F,funcy=NA)                      # How does the effort match up (log-log plot)?
Ecomp(obj,nice=T,log=F,funcy=NA,dens=T)
mapeff(obj,dens=F,lcex=0.3)
}
uprat<-0.015   # When converging on a stable effort distribution is the contributing fraction of new effort
varind<-0.2    # The slope of the logit choice (low values are 'choosey' a value of 1 is proportional to utility)
nits<-500      # The number of iterations for the numerical convergence to the approximate IFD
# --- Basic effort calculation (assuming effort is determined by obj@pcsize angler licences) --------------------
obj@sel<-array(c(0,0.2,rep(1,obj@nage-2)),dim=c(1,obj@nage))
obj<-calceff(obj,nits=nits,varind=varind,uprat=uprat)   # Run the LSM to convergence on the IFD
cond<-!is.na(obj@exeff[1,])&(obj@exeff[1,]<3|obj@sigeff[1,1,]<3) # Lakes to ignore
obj@exeff[1,cond]<-NA
#obj2<-Lsub(obj,!obj@longnam=="BEAVER4")
graphics.off()
par(mfrow=c(2,2),mai=c(0.8,0.8,0.1,0.1))                # Set up a plot
plotconv(obj,tol=1,totE=T)                              # Did it converge (total effort on a lake)?
Ecomp(obj,lims=c(2,11),nice=T,log=T,funcy=NA)                      # How does the effort match up (log-log plot)?
Ecomp(obj,lims=c(0,5000),nice=T,log=F,funcy=NA)                      # How does the effort match up (log-log plot)?
Ecomp(obj,nice=T,log=F,funcy=NA,dens=T)
mapeff(obj,dens=F,lcex=0.3)
cond<-!is.na(obj@exeff[1,])&(obj@exeff[1,]<3|obj@sigeff[1,1,]<3) # Lakes to ignore
obj@exeff[1,cond]<-NA
#obj2<-Lsub(obj,!obj@longnam=="BEAVER4")
graphics.off()
par(mfrow=c(2,2),mai=c(0.8,0.8,0.1,0.1))                # Set up a plot
plotconv(obj,tol=1,totE=T)                              # Did it converge (total effort on a lake)?
Ecomp(obj,lims=c(2,11),nice=T,log=T,funcy=NA)                      # How does the effort match up (log-log plot)?
Ecomp(obj,lims=c(0,5000),nice=T,log=F,funcy=NA)                      # How does the effort match up (log-log plot)?
Ecomp(obj,nice=T,log=F,funcy=NA,dens=T)
mapeff(obj,dens=F,lcex=0.3)
save(obj,file='./Out/Landscape/Landscape_Step3')
library(SSES)                                                          # Load the library
setwd("C:/Users/tcar_/Dropbox/SSES")                                # Set working directory
set.seed(1)                                                            # Set a random seed (to ensure reproducibility)
# --- Load latest complete landscape object (584 lakes, 24 population centres) -----------------------------------
load(file='./Out/Landscape/Landscape_Step3')                           # Load a recent full landscape model
subs<-read.csv("./Data/johnlakes.csv",header=T)                        # Subset of experimental lakes
# --- Subset the landscape model ---------------------------------------------------------------------------------
obj<-Lsub(obj,ind=match(unique(subs$WBID),obj@lakenam)) # Subset
summary(obj)                                            # What does it look like?
# --- We now have fewer lakes and thus less contrast in the lake x population centre distance matrix -------------
obj<-pc_simp(obj,h=850)                                 # Simplify the population centres for identifiability
summary(obj)                                            # What does it look like
# --- Add real effort, catch rate and length observations to the model -------------------------------------------
# Effort ---
cond<-subs$Year%in%(2009:2012)
obseff<-aggregate(subs$Effort[cond], by=list(subs$WBID[cond]),mean,na.rm=T) # Mean effort of the subset
obseff2<-rep(NA,nrow(obseff))
obseff2[match(obseff$Group.1,obj@lakenam)]<-obseff[,2]          # Reordered to match LS object
obseff2<-obseff2*obj@lakearea/4                                 # Convert to annual days over entire lake
obj@exeff<-matrix(obseff2,nrow=1)                               # Add real effort to the LS object
toteff<-sum(obseff2)                                            # Total observed effort
predeff<-sum(obj@pcsize[1,]*obj@apr[1,,]*obj@FTroutAng*obj@pcxa[1,,]) # Total predicted effort
obj@apr<-obj@apr*toteff/predeff                             # Match annual effort in the LSM model
# Catch rate ---
obscr<-aggregate(subs$predCPUE[cond], by=list(subs$WBID[cond]),mean,na.rm=T)# Mean catch rate of the subset
obscr2<-rep(NA,nrow(obscr))
obscr2[match(obscr$Group.1,obj@lakenam)]<-obscr[,2]             # Reordered to match LS object
obj@excr<-matrix(obscr2,nrow=1)                                 # Add real effort to the LS object
# Length ---
obsavs<-aggregate(subs$Mean_Length_250_GN[cond], by=list(subs$WBID[cond]),mean,na.rm=T) # Mean average length of the subset
obsavs2<-rep(NA,nrow(obsavs))
obsavs2[match(obsavs$Group.1,obj@lakenam)]<-obsavs[,2]          # Reordered to match LS object
obj@exavs<-matrix(obsavs2,nrow=1)                               # Add real effort to the LS object
# Stocking levels ---
mustk<-apply(subs[cond,14:16],1,mean)
stl<-aggregate(mustk,by=list(subs$WBID[cond]),mean,na.rm=T)
stl2<-rep(NA,nrow(stl))
stl2[match(stl$Group.1,obj@lakenam)]<-stl[,2]             # Reordered to match LS object
obj@lxslev<-array(0,dim=c(obj@nmanage,obj@nl,obj@nst))
obj@lxslev[1,,match("t2NYE",obj@stnam)]<-stl2*obj@lakearea
#obj@lxslev[1,match("PAT LAKE",obj@longnam),]<-c(500,0,0,4500)
# Access and Facilities ---
# vivian and Dominic lakes have facilities that are effectively shared by 4 or more other lakes
subs[subs$Lake=="Vivian",31:32]<-subs[subs$Lake=="Vivian",31:32]/4
subs[subs$Lake=="Dominic",31:32]<-subs[subs$Lake=="Dominic",31:32]/4
cond<-match(obj@lakenam,subs$WBID)
#acc<--(subs$Distance_on_gravel_road[cond]/55+
#         subs$Distance_on_4WD_road[cond]/15+subs$Foot_access_distance[cond]/3000)
acc<-exp(-subs$Distance_on_gravel_road[cond]/55)*
exp(-subs$Distance_on_4WD_road[cond]/15)*
exp(-subs$Foot_access_distance[cond]/3000)*
(subs$Num_campsites[cond]+subs$Num_Lodge_beds[cond]) # accessibility calculation
acc<-acc-mean(acc)                     # standardization to mean = 0
acc<-acc/sd(acc)                       # standardization to sd = 1
obj@acc<-matrix(acc,nrow=1)            # assign to object
cbind(obj@acc[1,],obj@longnam)         # what the accessibility score looks like
fac<- (subs$Num_campsites[cond]+
subs$Num_Lodge_beds[cond])    # facilities calculation
fac<-fac-mean(fac)                     # standardization to mean = 0
fac<-fac/sd(fac)                       # standardization to sd = 1
obj@fac<-matrix(fac,nrow=1)            # assign to object
# --- Initial guesses at key parameters
obj@acc_a<-1.15                        # Slope in access effect contribution to utility
obj@DR<-matrix(rep(0.6,obj@na),nrow=1) # Discarding rate
# --- Save the object --------------------------------------------------------------------------------------------
save(obj,file='./Out/Landscape/Landscape_Step4')
library(SSES)                                                          # Load the library
setwd("C:/Users/tcar_/Dropbox/SSES")                                # Set working directory
set.seed(1)                                                            # Set a random seed (to ensure reproducibility)
i_have_5_mins=T                                                        # How much computation do you want to do?
i_have_an_hour=T                                                       # How much computation do you want to do?
# --- Load experimental lakes landscape object (34 lakes, 8 population centres) -----------------------------------
load(file='./Out/Landscape/Landscape_Step4')                           # Load a recent landscape model
# --- Parameters for IFD calculations -----------------------------------------------------------------------------
uprat<-0.015   # When converging on a stable effort distribution is the contributing fraction of new effort
varind<-0.1    # The slope of the logit choice (low values are 'choosey' a value of 1 is proportional to utility)
nits<-300      # The number of IFD iterations
# --- accessibility and discard rate optimization -----------------------------------------------------------------
if(i_have_5_mins){
test<-nlm(opt_DR_acc,p=rep(0,2), stepmax=0.1,gradtol=0.001,steptol=0.01,obj=obj,nits=nits,plot=T,varind=varind,uprat=uprat)
obj<-opt_DR_acc(test$estimate,opt=F,obj=obj,nits=nits,varind=varind,uprat=uprat)            # Make a new object using the optimized parameters
}
test<-optim(rep(0,obj@npc),opt_apr,method="L-BFGS-B",lower=rep(log(0.1),obj@npc),upper=rep(log(10),obj@npc),
obj=obj,nits=nits,control=list(maxit=250,ndeps=rep(0.4,obj@npc)),plot=T,
varind=varind,uprat=uprat)
obj<-opt_apr(test$par,opt=F,obj=obj)                   # Make a new object using the optimized parameters
obj<-calceff(obj,nits=nits,varind=varind,uprat=uprat)  # Run the LSM to convergence on the IFD
plotconv(obj,tol=1,totE=F)                             # Did it converge (total effort on a lake)?
Ecomp(obj,log=T)                                       # How does the effort match up (log-log plot)?
obj<-calccouch2(obj)                                     # Calculate couch effect from fitted IFD effort
# --- Save the object --------------------------------------------------------------------------------------------
save(obj,file='./Out/Landscape/Landscape_Step5')
set.seed(1)                                                            # Set a random seed (to ensure reproducibility)
I_have_an_hour = TRUE                                                  # Time available for optimization
obj_exp<-obj                                                           # Copy loaded obj to obj_exp
# --- Parameters for IFD calculations -----------------------------------------------------------------------------
uprat<-0.015   # When converging on a stable effort distribution is the contributing fraction of new effort
varind<-0.1    # The slope of the logit choice (low values are 'choosey' a value of 1 is proportional to utility)
nits<-300      # The number of IFD iterations
# --- Load larger landscape object before subsetting in step 4 ----------------------------------------------------
load(file='./Out/Landscape/Landscape_Step3')
obj<-pc_simp(obj,h=600)                                 # Simplify the population centres for uniqueness based on distance
summary(obj)                                            # What does it look like
# --- Copy over conditioned parameters ----------------------------------------------------------------------------
obj@acc_a<-obj_exp@acc_a          # The affect of accessibility from experimental lakes is assumed to apply to all lakes
obj@DR<-obj_exp@DR                # The discarding rate from experiemental lakes is assumed to apply to all lakes
uprat<-0.025   # When converging on a stable effort distribution is the contributing fraction of new effort#varind<-0.8
varind<-0.1   # The slope of the logit choice (low values are 'choosey' a value of 1 is proportional to utility)
nits<-200      # The number of iterations for the numerical convergence to the approximate IFD
obj<-calceff(obj,nits=nits,varind=varind,uprat=uprat) # Run the LSM to convergence on the IFD
plotconv2(obj,totE=T,n=50)                         # Did it converge (total effort on a lake)?
Ecomp(obj,lim=c(2,10),nice=F,plottext=F)                                  # How does the effort match up (log-log plot)?
# --- Optimize for mean discard rate and average days fished per angler apr ---------------------------------------
#
# OPTIONAL: for what its worth (a fraction gain in predictive capacity and model fit) this takes a while (ie 2 hours)
if(I_have_an_hour){
test<-nlm(opt_DR_acc,p=rep(0,2),stepmax=0.1,gradtol=0.001,steptol=0.01,obj=obj,nits=100,plot=T,
varind=varind,uprat=uprat)
obj<-optEfunB(test$estimate,opt=F,obj=obj,nits=nits,plot=T,
varind=varind,uprat=uprat)                # Make a new object using the optimized parameters
}
# --- Calculate couch effect ----------------------------------------------------------------------------------------
obj<-calccouch2(obj)
# --- Save the object --------------------------------------------------------------------------------------------
save(obj,file='./Out/Landscape/Landscape_Step6')
obj<-opt_DR_acc(test$estimate,opt=F,obj=obj,nits=nits,plot=T,
varind=varind,uprat=uprat)                # Make a new object using the optimized parameters
obj<-calccouch2(obj)
save(obj,file='./Out/Landscape/Landscape_Step6')
saveRDS(obj,file='C:/temp/Landscape.rda')
obj@misc
shiny::runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
obj@GDD
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
class?Landscape
obj@eff
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
obj<-readRDS("C:/temp/Landscape.rda")
obj<-replic8(obj,nmanage=2)
obj@misc$Mnams<-c("Default","Alternative")
saveRDS(obj,file="C:/temp/Landscape.rda")
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
freq(obj@longnam)
hist(obj@longnam)
obj@longnam
unique(obj@longnam)
length(unique(obj@longnam))
length(obj@longnam)
length(make.unique(obj@longnam))
make.unique(obj@longnam)
obj@longnam<-make.unique(obj@longnam)
saveRDS(obj,file="C:/temp/Landscape.rda")
obj@misc$Mnams<-c("1: Default","2: Alternative")
saveRDS(obj,file="C:/temp/Landscape.rda")
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
obj@lakearea
class(obj@lakearea)
as.numeric(obj@lakearea)
newdata<-data.frame(lng=obj@lakex,lat=obj@lakey,area=as.numeric(obj@lakearea),name=obj@lakenam,longname=obj@longnam,col=rep("blue",length(obj@longnam)),stringsAsFactors = FALSE)
newdata$col[match(input$Lsel,obj@longnam)]<-"red"
class(newdata$area)<-"numeric"
circfunc<-function(x){
10+as.numeric(x)^0.3
}
circfunc(newdata$area)
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
obj@lakearea
obj@lakearea
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
?checkboxGroupInput
obj@stnam
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
obj@lxslev
dim(obj@lxslev)
max(obj@slev)
max(obj@lxslev)
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
obj@eff
max(obj@eff)
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
obj@lxattr
obj@attr
dim(obj@lxattr)
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
runApp('C:/GitHub/SSES/inst/shiny_apps/SSES')
shiny::runApp()
obj<-readRDS("C:/temp/Landscape.rds")
obj<-readRDS("C:/temp/Landscape.rda")
obj@pcxl
dim(obj@pcxl)
Ld<-c(T,T,T,F,F,T,F,T,T)
length(Ld)
Ldarr<-array(rep(Ld,each-obj@nmanage),c(obj@nmanage,obj@npc,obj@nl))
Ldarr<-array(rep(Ld,each=obj@nmanage),c(obj@nmanage,obj@npc,obj@nl))
Ldarr
input<-list
input$Ldist<-c(50,100)
class(input$Ldist)='numeric'
Ldist<-c(50,100)
LParr<-obj@pcxl>=Ldist[1]&obj@pcxl<=Ldist[2]
LParr
apply(LParr&Ldarr,c(1,3),sum)
runApp()
runApp()
dim(obj@lxslev)
obj@stnam
runApp()
obj@lxslev[mind,,]
mind
mind<-1
obj@misc$Mnams
obj@lxslev[mind,,]
runApp()
shiny::runApp()
obj@eff
obj<-readRDS("C:/temp/Landscape.rda")
dim(obj@eff)
runApp()
runApp()
dim(obj@eff)
apply(obj@eff[1,1,,,],2,sum)
range(apply(obj@eff[1,1,,,],2,sum))
runApp()
obj@lxattr
obj@attr
dim(obj@lxattr)
runApp()
shiny::runApp()
